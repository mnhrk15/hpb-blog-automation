---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW
This section provides a high-level overview of the project.  Further details can be found in the other sections of this document.  The project aims to automate blog post creation and publication for HotPepper Beauty.  The application is a web application built with Python Flask, designed to streamline the process of creating and publishing blog posts for beauty salons on HotPepper Beauty.  Key features include automated blog post generation from images using the Google Gemini API, scraping stylist and coupon information from the HotPepper Beauty website, and automated posting to the salon board.  The application will utilize a common password for authentication (no individual account management).

## CODE STYLE
Adhere to PEP 8 style guidelines for Python code.  Further style guides may be added as needed.

## FOLDER ORGANIZATION
The project follows a standard folder structure.  A `docs` folder (containing `requirements-definition.md`), an `app` folder (containing subfolders for `auth`, `blog`, `scraper`, `gemini`, `models`, `utils`, and `salon_board`), an `uploads` folder for storing uploaded images, and a `tests` folder for test scripts are confirmed to exist.  Added: `app/templates/auth`, `app/templates/blog`, `app/static/css`, `app/static/js`, `app/utils`, `tests/test_uploads`.  Added during implementation: `app/gemini`, `app/utils`.  Added during implementation: `app/templates/blog/hair_info.html`. Added: `app/salon_board`.

## TECH STACK
Python (version to be specified), Flask, Playwright, Google Gemini API, Pillow, pytest, pytest-flask, coverage, python-dotenv, pybase64, google-generativeai, beautifulsoup4, requests, flask-wtf.

## PROJECT-SPECIFIC STANDARDS
All implementations must strictly adhere to the requirements defined in `docs/requirements-definition.md`.  Thorough understanding of this document is mandatory before starting any implementation work.  The application must not attempt to circumvent HotPepper Beauty's robot detection mechanisms.  Generated content quality is not guaranteed; user review and editing are required.  Salon board IDs and passwords should only be used within the session and not stored.  The application should handle up to 4 image uploads. Image uploads are limited to 10MB each.  The application will utilize a common password for authentication (no individual account management).  The application will use BeautifulSoup4 and Requests for web scraping.  The correct login URL for Salon Board is `https://salonboard.com/login/`.

## WORKFLOW & RELEASE RULES
Workflow will follow a task list maintained in `todo.md`.  The application's handling of site specification changes is not guaranteed.  Implementation will proceed incrementally, with test scripts created for each feature.  Tasks will be tracked and updated in `todo.md`.  Codebase understanding and current status should be checked using tools like SpecStory to review `requirements-definition.md`, `todo.md`, and the codebase itself. After each implementation, thorough testing and debugging are mandatory.  Debugging should be performed after every implementation.  Code reviews should be conducted using SpecStory to ensure code quality and adherence to coding standards.  All implementations must be thoroughly tested before merging into the main branch.  Playwright will be used for salon board automation.  Thorough research on Playwright implementation methods is mandatory before starting implementation.  Headless mode for Playwright should be disabled during development for easier debugging and visual verification of the automation process.  Increased timeouts for Playwright actions to handle slow loading times on the Salon Board website.  Increased timeout values (60 seconds) implemented for Playwright actions to handle slow loading times. Screenshots are taken upon login timeouts or errors.  Comprehensive logging is implemented throughout the application, including Playwright interactions.  A default timeout of 60 seconds is implemented for Playwright actions. Screenshots are taken upon login timeouts or errors.

## REFERENCE EXAMPLES
Reference examples will be added to this section as needed.  `docs/requirements-definition.md` contains key requirements.  `todo.md` contains a task list for implementation.  `README.md` provides setup and execution instructions.  `2025-04-10_13-20-アプリの理解と現状把握.md`, `2025-04-10_14-24-untitled.md`, `2025-04-10_14-24-アプリの理解と現状把握.md`, `2025-04-11_00-24-アプリの理解と現状把握.md`, `2025-04-10_23-53-untitled.md` provide snapshots of the codebase structure and implementation status. Added: `2025-04-10_23-53-アプリのコードベース確認.md` documenting a comprehensive codebase review.  Added: `2025-04-10_14-24-アプリの理解と現状把握.md` detailing codebase review and implementation status.


## PROJECT DOCUMENTATION & CONTEXT SYSTEM
This project utilizes markdown files for documentation.  The `docs/requirements-definition.md` file is a critical component of the project and should be thoroughly reviewed.  `todo.md` will track tasks. A comprehensive README.md file has been added to explain the setup and running of the application.  A new README.md file has been added to explain the setup and execution of the application.  The application's task list is maintained in `todo.md`.  `2025-04-10_13-20-アプリの理解と現状把握.md`, `2025-04-10_14-24-untitled.md`, `2025-04-10_14-24-アプリの理解と現状把握.md`, `2025-04-11_00-24-アプリの理解と現状把握.md`, `2025-04-10_23-53-untitled.md` provide snapshots of the codebase structure and implementation status. Added: `2025-04-10_23-53-アプリのコードベース確認.md` which documents a comprehensive codebase review. Added: `2025-04-10_14-24-アプリの理解と現状把握.md` detailing codebase review and implementation status.

## DEBUGGING
Debugging strategies and best practices will be added here.  The application should gracefully handle robot detection and halt processing.  Unit and integration tests should be implemented for each feature.  Thorough testing is crucial, including unit and integration tests for each feature.  Error handling and logging should be implemented throughout the application.  Testing framework: pytest, pytest-flask, coverage.  Thorough logging is crucial for debugging.  Debugging should include print statements for detailed output to standard output during development.  Debugging should be performed after every implementation.  The application should handle Gemini API errors gracefully, logging details for debugging purposes.  A fallback mechanism should be implemented for cases where the Gemini API fails, such as using a simplified prompt.  Comprehensive logging should be implemented throughout the application, including Playwright interactions.  Debugging should leverage Playwright's logging capabilities for detailed browser interaction tracing.  When using Playwright in headless mode, ensure sufficient timeouts are set to avoid premature termination of browser operations.  Introduce wait times in Playwright actions for better visibility of the automation process during development.  The correct login URL for Salon Board is `https://salonboard.com/login/`.  The `--disable-dev-shm-usage` flag should be used when launching Playwright on macOS to mitigate potential process management issues.  Additional flags such as `--disable-gpu`, `--no-sandbox`, `--disable-setuid-sandbox`, `--allow-running-insecure-content`, and `--disable-web-security` may be necessary to improve stability and overcome security restrictions on macOS. Increased timeout values for Playwright actions are necessary to accommodate the slow loading times observed on the Salon Board website. Screenshots should be taken in case of login timeouts or errors to aid in debugging. Increased timeout values (60 seconds) implemented for Playwright actions to handle slow loading times. Screenshots are taken upon login timeouts or errors.  Comprehensive logging is implemented throughout the application, including Playwright interactions. A default timeout of 60 seconds is implemented for Playwright actions. Screenshots are taken upon login timeouts or errors.  The application should take screenshots upon login timeouts or errors to aid in debugging.  Increased timeout values (60 seconds) are implemented for Playwright actions.  A default timeout of 60 seconds is implemented for Playwright actions.  Increased timeout values (60 seconds) are implemented for Playwright actions to handle slow loading times on the Salon Board website.  Screenshots should be taken in case of login timeouts or errors. A default timeout of 60 seconds is implemented for Playwright actions.


## FINAL DOs AND DON'Ts
- DO: Carefully read and understand `docs/requirements-definition.md` before starting any coding.
- DON'T: Begin coding without a complete understanding of the requirements.
- DO: Ensure all generated content is reviewed and edited before posting.
- DON'T: Attempt to circumvent HotPepper Beauty's robot detection.
- DO: Use the provided template functionality for consistent blog post structure.
- DON'T: Persistently store salon board IDs and passwords.
- DO: Create thorough test scripts for each implemented feature.
- DO: Refer to the README.md file for setup and execution instructions.
- DO: Limit image uploads to a maximum of 4 images and 10MB per image.
- DON'T: Attempt to upload files larger than 10MB.
- DO: Use consistent markdown formatting for all documentation.
- DO:  Use the Gemini API key and model name specified in the `.env` file.
- DO: Ensure all error messages are informative and helpful to users.
- DO: Implement thorough logging throughout the application to aid in debugging.
- DO: Use consistent markdown formatting for all documentation.
- DO: Use informative and helpful error messages.
- DO: Implement robust error handling and logging.
- DO: Use BeautifulSoup4 and Requests for web scraping, handling potential errors gracefully.
- DO: Implement thorough testing for the scraping functionality.
- DON'T: Rely solely on one selector for scraping; implement fallback mechanisms for robustness.
- DO: Use multiple selectors and fallback mechanisms to ensure robustness in scraping.  Prioritize selectors that target specific classes or attributes to improve accuracy and reduce the chance of capturing unwanted elements.
- DO: Implement comprehensive logging throughout the scraping process to aid in debugging and troubleshooting.
- DO: Thoroughly test the scraping functionality with various scenarios and edge cases to ensure accuracy and reliability.
- DO: Use BeautifulSoup4 and Requests for web scraping. Implement robust error handling and logging for the scraping process.  Implement multiple selectors and fallback mechanisms to handle potential changes in the target website's structure. Thoroughly test the scraping functionality with various scenarios and edge cases.
- DO: Use multiple selectors for scraping to improve robustness.  Prioritize selectors that target specific classes or attributes to improve accuracy and reduce the chance of capturing unwanted elements.  Implement fallback mechanisms to handle potential changes in the target website's structure. Implement comprehensive logging throughout the scraping process to aid in debugging and troubleshooting. Thoroughly test the scraping functionality with various scenarios and edge cases to ensure accuracy and reliability.
- DO: Conduct thorough testing and debugging after each implementation.
- DO: Implement a clear and intuitive user interface that follows the documented user workflow.  The UI should provide clear visual cues and guidance to users at each step of the process.
- DO: Ensure the application provides informative error messages to the user in the event of failures, such as issues with the Gemini API or the scraping process.
- DO:  Implement robust error handling to prevent unexpected crashes or data loss.
- DO: Implement comprehensive logging to track application events, errors, and user interactions.
- DO: Implement a simple and intuitive UI/UX as per the latest user instructions.
- DO: Conduct regular code reviews using SpecStory to maintain code quality and consistency.
- DO: Implement thorough unit and integration tests for the salon board posting functionality.
- DO: Before implementing Playwright for salon board automation, conduct thorough research on best practices and implementation strategies.
- DO:  Correctly handle the Salon Board login URL which is `https://salonboard.com/login/`.
- DO: Implement wait times in Playwright actions for better visibility of the automation process during development.  Increase timeouts in Playwright to avoid premature termination of browser operations.
- DO: Ensure sufficient timeouts are set in Playwright to avoid premature termination of browser operations, especially in headless mode.  Introduce wait times for better visibility during development.  Increase timeout values to handle slow loading times on Salon Board.  Implement a default timeout of 60 seconds for Playwright actions.
- DO: Use `--disable-dev-shm-usage` flag when launching Playwright on macOS to mitigate potential process management issues.  Additional flags such as `--disable-gpu`, `--no-sandbox`, `--disable-setuid-sandbox`, `--allow-running-insecure-content`, and `--disable-web-security` may be necessary to improve stability and overcome security restrictions on macOS.  Take screenshots upon login timeouts or errors for debugging purposes.  Implement multiple strategies for detecting robot authentication, including checks for keywords in URLs and page titles, and JavaScript-based checks. Take screenshots of robot detection screens.  Implement a default timeout of 60 seconds for Playwright actions.  Implement multiple selectors for all Playwright interactions to increase robustness. Implement comprehensive logging throughout the application, including Playwright interactions. Implement a default timeout of 60 seconds for all Playwright actions.  Implement a mechanism to handle unexpected changes in the Salon Board website structure. Implement robust error handling and logging for all interactions with the Salon Board website. Implement multiple selectors and fallback mechanisms for all interactions with the Salon Board website to handle potential changes in website structure.  Implement comprehensive logging and error handling throughout the salon board automation process.