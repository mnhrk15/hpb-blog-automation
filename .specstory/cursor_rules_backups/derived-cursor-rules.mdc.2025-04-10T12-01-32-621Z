
## PROJECT OVERVIEW
This section provides a high-level overview of the project.  Further details can be found in the other sections of this document.  The project aims to automate blog post creation and publication for HotPepper Beauty.  The application is a web application built with Python Flask, designed to streamline the process of creating and publishing blog posts for beauty salons on HotPepper Beauty.  Key features include automated blog post generation from images using the Google Gemini API, scraping stylist and coupon information from the HotPepper Beauty website, and automated posting to the salon board.  The application will utilize a common password for authentication (no individual account management).

## CODE STYLE
Adhere to PEP 8 style guidelines for Python code.  Further style guides may be added as needed.

## FOLDER ORGANIZATION
The project follows a standard folder structure.  A `docs` folder (containing `requirements-definition.md`), an `app` folder (containing subfolders for `auth`, `blog`, `scraper`, `gemini`, `models`, and `utils`), an `uploads` folder for storing uploaded images, and a `tests` folder for test scripts are confirmed to exist.  Added: `app/templates/auth`, `app/templates/blog`, `app/static/css`, `app/static/js`, `app/utils`, `tests/test_uploads`.  Added during implementation: `app/gemini`, `app/utils`.

## TECH STACK
Python (version to be specified), Flask, Playwright, Google Gemini API, Pillow, pytest, pytest-flask, coverage, python-dotenv, pybase64, google-generativeai.

## PROJECT-SPECIFIC STANDARDS
All implementations must strictly adhere to the requirements defined in `docs/requirements-definition.md`.  Thorough understanding of this document is mandatory before starting any implementation work.  The application must not attempt to circumvent HotPepper Beauty's robot detection mechanisms.  Generated content quality is not guaranteed; user review and editing are required.  Salon board IDs and passwords should only be used within the session and not stored.  The application should handle up to 4 image uploads. Image uploads are limited to 10MB each.  The application will utilize a common password for authentication (no individual account management).


## WORKFLOW & RELEASE RULES
Workflow will follow a task list maintained in `todo.md`.  The application's handling of site specification changes is not guaranteed.  Implementation will proceed incrementally, with test scripts created for each feature.  Tasks will be tracked and updated in `todo.md`.

## REFERENCE EXAMPLES
Reference examples will be added to this section as needed.  `docs/requirements-definition.md` contains key requirements.  `todo.md` contains a task list for implementation.  `README.md` provides setup and execution instructions.

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
This project utilizes markdown files for documentation.  The `docs/requirements-definition.md` file is a critical component of the project and should be thoroughly reviewed.  `todo.md` will track tasks. A comprehensive README.md file has been added to explain the setup and running of the application.  A new README.md file has been added to explain the setup and execution of the application.

## DEBUGGING
Debugging strategies and best practices will be added here.  The application should gracefully handle robot detection and halt processing.  Unit and integration tests should be implemented for each feature.  Thorough testing is crucial, including unit and integration tests for each feature.  Error handling and logging should be implemented throughout the application.  Testing framework: pytest, pytest-flask, coverage.

## FINAL DOs AND DON'Ts
- DO: Carefully read and understand `docs/requirements-definition.md` before starting any coding.
- DON'T: Begin coding without a complete understanding of the requirements.
- DO: Ensure all generated content is reviewed and edited before posting.
- DON'T: Attempt to circumvent HotPepper Beauty's robot detection.
- DO: Use the provided template functionality for consistent blog post structure.
- DON'T: Persistently store salon board IDs and passwords.
- DO: Create thorough test scripts for each implemented feature.
- DO: Refer to the README.md file for setup and execution instructions.
- DO: Limit image uploads to a maximum of 4 images and 10MB per image.
- DON'T: Attempt to upload files larger than 10MB.
- DO: Use consistent markdown formatting for all documentation.
- DO:  Use the Gemini API key and model name specified in the `.env` file.